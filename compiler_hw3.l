/* Definition section */
%{
#include <stdio.h>
#include "y.tab.h"	/* header file generated by bison */
extern YYSTYPE yylval; //YYSTYPE
char id_name[100];
char left_id_name[100];
char var_id_name[100];
char str[100];
int len;
int i_number;
double f_number;
int lines=0;
int error_line;
%}

/* Define regular expression label */
digit		[0-9]
letter		[a-zA-Z]
integer     {digit}+
real      {digit}+"."{digit}+
id	{letter}+({letter}|{digit})*
c_comment "/*"([^*]|\*+[^*/])*\*+"/"
string \"(\\.|[^"\\])*\"

%option yylineno



/* Rules section */
%%

 /* Arithmetic */
"+" 	{return('+'); }
"-"	{ return('-'); }
"*"	{ return('*'); }
"/"	{error_line=lines+1;  return('/'); }
"%"	{error_line=lines+1; return('%'); }
"++"	{ return(T_INC); }
"--"	{ return(T_DEC); }

 /* Relational */
"<" 	{ return('<');}
">" 	{ return('>');}
"<=" 	{ return(T_LE);}
">=" 	{ return(T_GE);}
"==" 	{ return(T_EQ);}
"!=" 	{ return(T_NE);}

 /* Assignment */
"=" 	{ strcpy(left_id_name,id_name); error_line=lines+1; return(T_ASSIGN); }
"+=" 	{strcpy(left_id_name,id_name);  error_line=lines+1; return(T_AbADD); }
"-=" 	{strcpy(left_id_name,id_name); error_line=lines+1;  return(T_AbMIN); }
"*=" 	{strcpy(left_id_name,id_name); error_line=lines+1; return(T_AbMUL); }
"/=" 	{strcpy(left_id_name,id_name); error_line=lines+1; return(T_AbDIV); }
"%=" 	{strcpy(left_id_name,id_name); error_line=lines+1; return(T_AbMOD); }
 /* Logical */
"&&" 	{ return(T_AND);}
"||" 	{ return(T_OR);}
"!" 	{ return(T_NOT);}

 /* Delimiters */
"(" 	{return('(');}
")" 	{return(')');}
"{"		{return(T_LB);}
"}"		{return(T_RB);}

 /* Print Keywords */	
"print" 	{ return(T_PRINT);}
"println" 	{ return(T_PRINTLN);}

 /* Condition and Loop Keywords */
"if"	{ return(T_IF);}
"else"	{ return(T_ELSE);}
"for"	{ return(T_FOR);}

 /* Declaration Keywords */
"var"		{/*error_line=lines+1;*/ return T_VAR;  }
"int"		{error_line=lines+1; strcpy(var_id_name,id_name); return T_INT;  }
"float32"	{error_line=lines+1; strcpy(var_id_name,id_name); return(T_FLOAT); }

 /* String Constant */
{string}	{ 
	int i;
	len=strlen(yytext);
	for(i=1;i<len-1;i++)
	str[i]=yytext[i];
	str[len-1]='\0';
    return(T_STRING);
}

 /* Number Constant */
{integer}	{i_number=atoi(yytext); return T_INTEGER;}
{real}	{f_number=atof(yytext); return T_REAL;}

 /* C type Comment */
{c_comment} {
	int k,comment_len=strlen(yytext);
	for(k=0;k<comment_len;k++)
		if(yytext[k]=='\n'){
			lines++;}
}

 /* C++ type Comment */
\/\/.*	{ }

 /* Variable ID */
{id}	{ strcpy(id_name,yytext); return T_IDENTIFIER;}

 /* others */

[\n]		{lines++; }
[ \t]		{ } /* Ignore */
[^; \t] 	{ } /* Ignore other charactor sets */
<<EOF>> 	{ static int once = 0; return once++ ? 0 : '\n'; }

%%

int yywrap() {
    return 1;
}

